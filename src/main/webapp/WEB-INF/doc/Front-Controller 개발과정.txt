▣ 프론트컨트롤러 개발방식 예제 
    - LoginCheckFilter 로그인 필터를 적용
    - 클라이언트의 모든 요청을 하나의 컨트롤러를 통해 얻어낸 후 알맞은 서브 컨트롤러를 호출하여 비지니스 로직을 실행후 데이터를 각각의 JSP 파일에 전송하는 방식
    - 회원관리 추가
        list.jsp,        /user/list.do,        UserListCtrl

▣ 다이나믹 웹프로젝트 -> 메이븐 프로젝트 전환 => ★★★★★모델2의 모든 작업파일을 복붙★★★★★

▣ pom.xml 에서 modelmapper 라이브러리 추가
    모델매퍼를 이용하기 위해서는 VO, DTO에 (필드있는, 필드없는)생성자 어노테이션 설정 필수
 
▣ com.study.jsp.ctrl 패키지에서 프론트컨트롤러 역할의 DispatcherServlet 클래스 추가

▣ 기존의 컨트롤러를 Controller 인터페이스를 상속받는 서브컨트롤러 형식으로 변환한다. 
    DispatcherServlet   - 클라이언트의 요청을 수집할 프론트 컨트롤러
    HanderMapping       - 접속경로별 실행할 서브컨트롤러 등록
    Controller          - 클라이언트 요청에 따라 실행할 서브컨트롤러의 인터페이스
                          public Map execute(req,res) 


※ HandlerMapping 설정
    방법1) -> 복잡
        web.xml에서 handlerURI.properties를 설정후 여기서 정보를 얻어 Map객체에 저장    
       스프링에서 .properties 파일사용은 간단하지만 순수 JSP에서 사용은 굉장히 복잡하다.
    
    방법2) -> 간단
       HandlerMapping 클래스에서 직접 매핑설정
       

▣ webapp > views > board + user 폴더 생성


▣ 매퍼ID명 - save(), findAll, getOne, delete, update, increaseCnt

▣ Mapper (XML + 인터페이스) 연동 규칙
    1. xml파일의 namespace와 인터페이스의 fullName이 동일하고
    2. xml파일의 매핑구문 id와 인터페이스의 method명이 동일하고
    3. return 타입과, parameter 타입이 동일해야 한다. 
    